Given the context I think I will need to use a graph, and the depth first search algorithm to find the closest path. 
I can hardcode the moves, and check that they are in bounds. If I have an nxn board, I can write a function to get all
possible moves from a cell [x, y]

function get_moves cell, size {
  hardcoded = [
    { x: -2, y: -1 },
    { x: -1, y: -2 },
    { x: 1, y: -2 },
    { x: 2, y: -1 },
    { x : 2, y: 1 },
    { x: 1, y: 2 },
    { x: -1, y: 2 },
    { x: -2, y: 1 }
  ]
  moves = []

  for let move of hardcoded {
    move = { x: move.x + cell.x, y: move.y + cell.y }

    if 0 <= x <= size && 0 <= y <= size
      moves.push move
  }

  return moves
}

I have a cell C = { x, y }, and a set of moves I can make. With breadth level traversal I would visit each of the cells
those moves would take me to, and if any of those were the target cell, I would return something, otherwise I would then visit 
the cells I can get to from those places, and so on until there are no more places to visit. I need to keep track of which
cells I have visited for a given route, so I don't visit them again. If the coordinates of the target cell are within the
dimensions of the board, then the target cell is guaranteed to be reached. I could have a check for this, but for simplicity won't,
or if so, it will be until the end.

I have all the moves I can do from the starting position. For each one, I create a path array that will keep track of the steps
I make. I shove the starting position into each one of those arrays, and next the current step. If any of the cells I land on is the
target cell, I return it's respective path. 

Turns out none of the cells I can get to from the starting position is the one I'm looking for. If I start at A, and can get to B,
C, and D from there, I have the paths = [ [A, B], [A, C], [A, D] ]. None of B, C, or D is the target cell, so I will move on to the
cells I can reach from those places. I think I should replace paths with an array of paths from A to the places I can reach from
the current nodes. So, for example if I can reach Q, W, and E from B, R, and T from C, and Y, U, and I from D, then after doing 
something I should end up with the paths [ [A, B, Q], [A, B, W], [A, B, E], [A, C, R], [A, C, T], [A, D, Y], [A, D, U], [A, D, I] ].
This value would replace the one previously held by the paths array. If the last element of any of those arrays is the one I'm 
looking for, then that's the array I'm returning, otherwise I repeat the process. I have to be careful not to add duplicate elements
to the array. 

I think I understand what to do, but I'm having trouble translating that into code. If the target cell is in the board, it's guaranteed
to be reached eventually, so I'll have an infinite loop outside that will be broken once I reach the target. While forever do this:
check all the elements of the paths array. Those elements are arrays of points. Each of those arrays will be replaced by several more
arrays of points, those arrays will be created based on the last element of the array. In the example above, [A, B] was replaced by
[A, B, Q], [A, B, W], and [A, C, R]. 

function find_path start, target, size {
  paths = [[start]]

  while true {
    temps = []

    for path of paths {
      moves = get_moves(path[-1], size).filter move => true unless path.include move
      found = moves.find move => move === target
      
      if found
        return [...path, found]

      moves.map! move => [...path, move]
      temps += moves
    }

    paths = temps
  }
}