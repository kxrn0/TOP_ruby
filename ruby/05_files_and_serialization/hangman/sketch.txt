How should I approach this? There are two main parts to the project; coding the game logic, and the logic for saving and loading previous games.

I think I should first code the game logic, and once it's done I'll do the saving part.

_____
|   |
|   O
|  /|\
|  / \
|
_.r._.g.r.a._

When the game loads the computer selects a random word from a dictionary. Then we enter a loop where we guess characters until we win or we run out of turns. Once we run out, the computer asks the user if they want to play again. If they say yes, then the cycle repeats, otherwise the program stops.

What variables do we need to keep track of? We need to keep track of the secret word, also of the current number of remaining turns. The initial number of turns as a constant may also prove to be useful when resetting the game. We also need to keep track of the correct guesses. Given that it would be more convenient to know how many mistakes the user has made to draw the stick figure, maybe we should have a variable for that rather than for the remaining turns. Then the game will be over once the number of mistakes, which starts at zero, is equal to the max number of mistakes possible.

How do we keep track of the correct guesses? I think we should use an array of characters. If the word is "aabcab", we would initially render "_._._._._._". If the user types "a", then since that character is in the secret, we store it in the array of correct guesses and render "a.a._._.a._"

.

.

.

I think I'm done with the game logic. When the game loads the user will be presented with this menu

Instructions

help -> help
new -> new game
load -> load saved game
end -> end the current game
save -> save the current game
exit -> exit

If the user enters "l", the names of saved games will be printed in the form 

(1) abc
(2) def
(3) fgh

The user will be expected to enter a number to select a game, which if it exists, will be loaded, and the user can start playing it.

If the user eneters "end" the current game will end, a message indicating this will be printed, and the options will be printed.

If the enters "save", the current game will be saved, but the user will continue playing it. The games will be saved to a folder for them. A text file above that folder will keep track of the names of the saved games, so that when the user is loading a game all of the game data won't have to be deserialized.

What will the main logic loop look like? I can try doing something like this

@isOn = true

function get_input(message, choices) {
  badInput = true

  while true {
    print message
    input = gets.chomp

    if choices.include? input
      return input
  }
}

function print_help() {
  print "
    help -> help
    new -> new game
    load -> load saved game
    end -> end the current game
    save -> save the current game
    exit -> exit
  "
}

function init_game_state() {
  @state.isPlaying = true
  @state.secret = choose_secret
  @state.mistakes = 0
  @state.hits = []
}

function print_board {
  # rest of the fucking...
}

function play_again?() {
  print "play again (yes / no)?: "
  input = get_input(["yes", "no"])
  
  if input == "yes" 
    init_game_state()
  else {
    @state.isPlaying = false
    print "back to main menu..."
  }
}

function save_game() {
  Dir.mkdir "games" unless Dir.exist? "games"

  print "Enter game name: "
  name = gets.chomp
  date = Time.now.to_s.split.join "_"
  filename = "#{sanitize name}_#{date}.json"
  data = {
    secret: @state.secret,
    mistakes: @state.mistakes,
    hits: @state.hits
  }
  contents = JSON.dump data
  
  File.write "game_names.txt", "#{filename}\n", mode: "a"
  File.open "games/#{filename}", "w", file => file.puts contents

  puts "game saved, enter 'end' to end current game, or continue playing"
}

function get_guess() {
  badInput = true

  while badInput {
    print "enter guess"
    input = gets.chomp.downcase

    if input.length == 1 {
      if @state.secret.include? input {
        if @state.hits.include? input
          @state.mistakes++
        else
          @state.hits.push input
      }
      else
        @state.mistakes++
    }
    else {
      case input {
        when "help"
          print_help
        when "new"
          puts "Can't start a new game while one is in progress."
        when "load"
          puts "Can't load game while one is in progress."
        when "end"
          puts "Terminating current game"
          @state.isPlaying = false
        when "save"
          puts "saving game"
          save_game
        when "exit"
          @state.isPlaying = false
          @isOn = false
      }
      else
        puts "Invalid input!"
    }
  }
}

function play() {
  while @state.isPlaying {
    print_board()

    if @state.mistakes >= @state.maxMistakes {
      print "gaem over fag"
      play_again?
    }
    else if @state.secret.every(char => @state.hits.include? char) {
      print "you win"
      play_again?
    }
    else
      get_guess
  }
}

function get_number(min, max, bcond) {
  reg = /^\d+$/
  while true {
    input = gets.chomp
    
    return nil if input == bcond

    n = input.to_i

    if input.match(reg) && min <= n && n <= max
      return n
    
    print "Invalid input! Please try again: "
  }
}

function remove_line(text, name) {
  ext = name.split(".")[-1]
  tempName = "#{Time.now.to_f.to_s}.#{ext}"

  File.open("#{tempName}", "w") do |temp|
    File.foreach(name) do |line|
      line = line.chomp
      temp.puts line unless line == text
    end
  end

  FileUtils.mv tempName, name
}

function load_game() {
  gameList = []
  File.foreach("game_names.txt", line => gameList.push[line.chomp])

  gameList.forEach (name, index) => puts "#{index + 1} - #{name}"
  badInput = true
  while badInput {
    print "Enter the index of the game you wish to load, or 'back' for main menu:"
    index = get_number(1, gameList.size, "back")
    
    unless index
      return puts "back to main menu..."

    index -= 1
    exists = File.exist? gameList[index]

    unless exists {
      corrupt = gameList[index]

      gameList.filter! { |name| name !== corrupt }

      remove_line corrupt, "game_names.txt"      
      puts "Game not found. Try a different one."
    }
    else {
      file = File.open gameList[index]
      data = JSON.parse file.read
      
      if
        data["secret"].class == Array &&
        data["mistakes"].class == Integer &&
        data["hits"].class == Array
        {
          input = get_input("play / delete / menu :"["play", "delete", "menu"])

          case input {
            when "play":
              @state[:secret] = data["secret"]
              @state[:mistakes] = data["mistakes"]
              @state[:hits] = data["mistakes"]
              @state[:isPlaying] = true
            when "delete":
              name = gameList[index]
              gameList.filter! { |name| name !== file }
              remove_line file, "game_names.txt"   
              File.delete name if File.exist? name
            when "menu":

              badInput = false
          }
        }
      else {
        corrupt = gameList[index]

        gameList.filter! { |name| name !== corrupt }

        remove_line corrupt, "game_names.txt"      
        puts "Game corrupted. Try a different one."
      }

      file.close()
    }
  }
}

function init() {
  init_game_state()

  while @isOn {
    print "Instructions:"
    print_help

    option = get_input(["help", "new", "load", "end", "save", "exit"])
    case option {
      when "help"
        print_help
      when "new"
        play 
      when "load"
        load_game
      when "end"
        print "nothing to end"
      when "save"
        print "nothing to save"
      when "exit"
        exit
    }
  }
}

def initialize
  @state = { maxMistakes: 7 }
end

init()
